name: build-dependencies

on:
  push:

env:
  LLVM_COMMIT: 'llvmorg-13.0.0'
  VCPKG_COMMIT: '2021.05.12'

jobs:
  vcpkg:
    name: build-${{ matrix.os }}-${{ matrix.package }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        package:
          - fmt
          - z3
          - capnproto
          - magic-enum
          - immer
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: microsoft/vcpkg
          ref: ${{ env.VCPKG_COMMIT }}
          path: vcpkg

      - uses: actions/cache@v2
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          path: |
            ~/.cache/vcpkg
          key: vcpkg-binaries-${{ matrix.os }}-${{ hashfiles('vcpkg/.git/HEAD') }}
        
      - uses: actions/cache@v2
        if: ${{ matrix.os == 'windows-latest' }}
        with:
          path: |
            %LOCALAPPDATA%\vcpkg
          key: vcpkg-binaries-${{ matrix.os }}-${{ hashfiles('vcpkg/.git/HEAD') }}

      - name: Install vcpkg on unix
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: |
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
      
      - name: Install vcpkg on windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          ./vcpkg/bootstrap-vcpkg.bat -disableMetrics

      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-linux" >> $GITHUB_ENV
          
      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-osx" >> $GITHUB_ENV
      
      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-windows" >> $GITHUB_ENV 

      - name: Install ${{ matrix.package }}
        shell: bash
        run: |
          ./vcpkg/vcpkg install --triplet=${{ env.VCPKG_TRIPLET }} ${{ matrix.package }} --debug
          ./vcpkg/vcpkg export  --triplet=${{ env.VCPKG_TRIPLET }} ${{ matrix.package }} \
            --output-dir=. \
            --output=${{ matrix.package }} \
            --raw

          tar c ${{ matrix.package }} | xz -4e > ${{ matrix.package }}.tar.xz

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package }}-${{ matrix.os }}.tar.xz
          path: ${{ matrix.package }}.tar.xz

  llvm:
    name: build-${{ matrix.os }}-${{ matrix.package }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        package:
          - llvm
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_COMMIT }}
          path: llvm-project

      - uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-llvm-${{ matrix.os }}

      - uses: lukka/get-cmake@latest
      
      - name: Setup LLVM CMake Build
        shell: bash
        run: |
          mkdir build
          cmake -B build -S llvm-project/llvm -G Ninja \
            -DCMAKE_INSTALL_PREFIX=$HOME/install \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DLLVM_ENABLE_PROJECTS="llvm;clang;clang-tools-extra"

      - name: Build and install LLVM
        shell: bash
        run: |
          cd build
          cmake --build . --target install

      - name: Create LLVM Tarball
        shell: bash
        run: |
          mv install llvm
          tar -c llvm | xz -4e > ${{ matrix.package }}.tar.xz

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package }}-${{ matrix.os }}.tar.xz
          path: ${{ matrix.package }}.tar.xz