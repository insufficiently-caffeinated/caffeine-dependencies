name: build-dependencies

on:
  push:
    inputs:
      manual:
        default: false
  workflow_dispatch:
    inputs:
      manual:
        default: true

env:
  LLVM_COMMIT: 'llvmorg-13.0.0'
  VCPKG_COMMIT: 'ac030b40d53f820bad26148ed6ee46d6fd0f183d'

jobs:
  vcpkg:
    name: build-${{ matrix.os }}-${{ matrix.package }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        package:
          - fmt
          # - z3
          - capnproto
          - magic-enum
          - immer
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'microsoft/vcpkg'
          ref: ${{ env.VCPKG_COMMIT }}

      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-linux" >> $GITHUB_ENV
          
      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-osx" >> $GITHUB_ENV
      
      - name: Setup vcpkg triplet
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          echo "VCPKG_TRIPLET=x64-windows" >> $GITHUB_ENV 

      - uses: lukka/run-vcpkg@v7
        with:
          vcpkgArguments: ${{ matrix.package }} --debug
          vcpkgDirectory: ${{ runner.workspace }}/vcpkg/
          vcpkgTriplet: ${{ env.VCPKG_TRIPLET }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          appendedCacheKey: ${{ matrix.os }}-${{ matrix.package }}

      - name: Export ${{ matrix.package }}
        shell: bash
        run: |
          ${{ runner.workspace }}/vcpkg/vcpkg export ${{ matrix.package }} \
            --triplet=${{ env.VCPKG_TRIPLET }} \
            --output-dir=. \
            --output=${{ matrix.package }} \
            --raw

          tar c ${{ matrix.package }} | xz -T0 -4e > ${{ matrix.package }}-${{ matrix.os }}.tar.xz

      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: ${{ matrix.package }}-${{ matrix.os }}.tar.xz

  llvm:
    name: build-${{ matrix.os }}-${{ matrix.package }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - ubuntu-latest
          # - macos-latest
          # - windows-latest
        package:
          - llvm
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_COMMIT }}
          path: llvm-project

      - uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-llvm-${{ matrix.os }}

      - uses: lukka/get-cmake@latest
      
      # - name: Setup LLVM CMake Build
      #   shell: bash
      #   run: |
      #     mkdir build
      #     mkdir llvm
      #     CC=clang CXX=clang++ cmake -B build -S llvm-project/llvm -G Ninja \
      #       -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/llvm \
      #       -DCMAKE_BUILD_TYPE=Release \
      #       -DCMAKE_C_COMPILER_LAUNCHER=ccache \
      #       -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
      #       -DLLVM_ENABLE_PROJECTS="llvm;clang;clang-tools-extra" \
      #       -DLLVM_ENABLE_LLD=TRUE \
      #       -DLLVM_ENABLE_LTO=FALSE \
      #       -DLLVM_PARALLEL_LINK_JOBS=1

      # - name: Build and install LLVM
      #   shell: bash
      #   run: |
      #     cd build
      #     cmake --build . --target install

      # - name: Create LLVM Tarball
      #   shell: bash
      #   run: |
      #     tar -c llvm | xz -T0 -0 > ${{ matrix.package }}-${{ matrix.os }}.tar.xz

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: packages
      #     path: ${{ matrix.package }}-${{ matrix.os }}.tar.xz

  release:
    name: release
    runs-on: ubuntu-latest
    needs:
      - vcpkg
      - llvm
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ${{ runner.workspace }}

      - name: List all artifacts
        shell: bash
        run: |
          ls ${{ runner.workspace }}/packages

      - name: Export date
        shell: bash
        run: |
          echo RELEASE_DATE=$(date '+%Y-%m-%d-%H-%M') >> $GITHUB_ENV

      - uses: softprops/action-gh-release@v1
        # if: ${{ inputs.manual }}
        with:
          files: ${{ runner.workspace}}/packages/*.tar.xz
          name: caffeine-deps-${{ env.RELEASE_DATE }}
          draft: true
