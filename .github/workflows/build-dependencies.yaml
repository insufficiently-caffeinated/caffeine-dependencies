name: build-dependencies

on:
  push:

env:
  LLVM_COMMIT: 'llvmorg-13.0.0'
  MUSL_VERSION: '1.2.2'
  VCPKG_COMMIT: 'ac030b40d53f820bad26148ed6ee46d6fd0f183d'
  LINUX_TAG: 'v5.14'

jobs:
  linux:
    name: build-linux-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - i386
          - arm
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          repository: torvalds/linux
          ref: ${{ env.LINUX_TAG }}
          path: linux-git

      - name: Install linux headers
        shell: bash
        run: |
          mkdir -p linux-install
          cd linux-git
          make -j2 ARCH=${{ matrix.arch }} allmodconfig
          make -j2 ARCH=${{ matrix.arch }} INSTALL_HDR_PATH=../linux-install headers_install

      - name: Package linux headers
        shell: bash
        run: |
          tar -c linux-install | xz -T0 -4e > linux-${{ matrix.arch }}.tar.xz
          
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: linux-${{ matrix.arch }}.tar.xz

  musl:
    name: build-musl
    runs-on: ubuntu-latest
    env:
      LLVM_CC_NAME: clang-12
      LLVM_CXX_NAME: clang++-12
      LLVM_LINK_NAME: llvm-link-12
      CC: gclang
      CXX: gclang++
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.6'

      - name: Setup dependencies
        run: |
          sudo apt-get install -y ${{ env.LLVM_CC_NAME }}
          go get github.com/SRI-CSL/gllvm/cmd/...

      - name: Get musl source
        run: |
          wget https://musl.libc.org/releases/musl-${{ env.MUSL_VERSION }}.tar.gz
          tar xf musl-${{ env.MUSL_VERSION }}.tar.gz
          mv musl-${{ env.MUSL_VERSION }} musl
          mkdir -p install

      - name: Configure
        run: |
          cd musl
          ./configure --prefix=../install --disable-shared

      - name: Build
        run: |
          cd musl
          make -j2

      - name: Install
        run: |
          cd musl
          make install

      - name: Extract bitcode
        shell: bash
        run: |
          ./extract-bitcode.sh install/lib

      - name: List included files
        shell: bash
        run: |
          find install -type f

      - name: Create package tarball
        shell: bash
        run: |
          tar -c install | xz -T0 -9e > musl.tar.xz
          
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: musl.tar.xz

  libcxx:
    name: build-libcxx
    runs-on: ubuntu-latest
    env:
      LLVM_CC_NAME: clang-12
      LLVM_CXX_NAME: clang++-12
      LLVM_LINK_NAME: llvm-link-12
      CC: gclang
      CXX: gclang++
    needs:
      - musl
    uses:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: llvm/llvm-project
          ref: ${{ env.LLVM_COMMIT }}
          path: llvm-project

      - uses: hendrikmuhs/ccache-action@v1
        with:
          key: ccache-libcxx

      - uses: actions/setup-go@v2
        with:
          go-version: '^1.16.6'

      - uses: actions/download-artifact@v2
        with:
          path: ${{ runner.workspace }}

      - name: Install dependencies
        run: |
          apt-get install -y ninja-build
          go get github.com/SRI-CSL/gllvm/cmd/...
          tar xf ${{ runner.workspace }}/packages/musl.tar.xz
      
      - name: Configure LLVM
        run: |
          mkdir -p build
          cmake -G Ninja -S llvm-project/llvm -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/install \
            -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi;clang" \
            -DLIBCXXABI_ENABLE_EXCEPTIONS=ON \
            -DLIBCXX_ENABLE_EXCEPTIONS=ON \
            -DLIBCXX_ENABLE_THREADS=OFF \
            -DLIBCXX_HAS_PTHREAD_API=OFF \
            -DLIBCXX_HAS_WIN32_API_THREAD_API=OFF \
            -DLIBCXX_HAS_EXTERNAL_THREAD_API=OFF \
            -DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY=OFF \
            -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
            -DLLVM_RUNTIME_DISTRIBUTION_COMPONENTS="libcxx;libcxxabi"

      - name: Build LLVM
        run: |
          cd build
          ninja distribution

      - name: Install LLVM
        run: |
          cd build
          ninja install-distribution

      - name: Create package tarball
        shell: bash
        run: |
          tar -c install | xz -T0 -9e > libcxx.tar.xz
          
      - uses: actions/upload-artifact@v2
        with:
          name: packages
          path: libcxx.tar.xz

  release:
    name: release
    runs-on: ubuntu-latest
    needs:
      - linux
      - musl
      - libcxx
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ${{ runner.workspace }}

      - name: List all artifacts
        shell: bash
        run: |
          ls ${{ runner.workspace }}/packages

      - name: Export date
        shell: bash
        run: |
          echo RELEASE_DATE=$(date '+%Y-%m-%d-%H-%M') >> $GITHUB_ENV
          echo ${{ inputs.manual }}

      - uses: softprops/action-gh-release@v1
        if: github.ref == 'refs/heads/master'
        with:
          files: ${{ runner.workspace}}/packages/*.tar.xz
          name: caffeine-deps-${{ env.RELEASE_DATE }}
          tag_name: caffeine-deps-${{ env.RELEASE_DATE }}
          draft: true
